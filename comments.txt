consol - это обьект 
log - это метод 
. - это точечная запись с пмошью котрого можно получать доступ к обекту но в данном случае мы получаем доступ к методу обьекта напирмер consol.log('hello World')
() - вызова метода в данном случае log
внутри вызова находиться аргумент в данном случае значение типа строка 'string'

кроме метода log у console есть такие методы как 
console.dir() - отоброжает все своиства обьекта
console.table() - отоброжает все своиства обьекта в табличном виде 

a = 5 - это выражение в котором а присваиваеться 5 
b++ - вырожение с бобочными действиями 

                Переменные
переменные дают возможность повторного доступа к значениеям

              Правилаработы с переменными 
js - динамически типизируемый язык 
и если обьявить функцию через ключевое слово functiion a() 
то потом можно  a перепресвоить другое значение и оно уже не будет функцией 
1. всегда переменные обьявлять перед их использованием 
2. стараться использовать const везде где это возможно

лучше использовать скобочную запись только тогда когда в квадратных скобках должно быть какое то вырожение например название переменной в остальных случаях лучше использовать точечную запись пример: delete myCity.info['isPopular']

  также обьекты можно создвать с помошью переменных и сразу сокрощать их как пример : 

  const name = 'kamil'
 const postsQty = 25

 const useProfile = {
   name,
   postsQty,
  agree: false
}

           глобальные обьекты 
в браузере - это window
в nodeJs - это global 
однако сделали универсальный вызов для обоих  - это globalThis

метод - свойство обьекта,значение которого функция
методы vs свойство обьектов - {
myCity.city - доступ к значению
myCity.cityGreeting() - вызов метода

любой метод также являеться свойством так как обьект это набор свойств и некоторые из этих свойств называються методами если их значения это функция}


                     JSON-
          javascript object notation
json.parse() - переводит строку в обьект 
json.stringify() - переводит обьект в строку

const post = {
  age: 25,
  hight: 170,
  name: "oleg",
  city: 'Moscow'
}

JSON.stringify(post)
const post2 = JSON.stringify(post)
JSON.parse(post2)
получим исходний обьект превращенный обратно

         Мутирование обьекта 
если создать обьект на основе исходника и изменить копию то и измениться оригинал 
однако можно избежать мутации используя метод assign
    3 вида мутции и копии обьекта 
    1. - метода object.assign
    2. - спред оператор 
    3. - через JSON


                фунцкции
функции могут быть 
1 - именованрй
2- присвоеной переменной
3 - анонимной
4 - аргументом при вызове другой функции
5 - значении своиства (методы)обьекта

функция возвращает undefiend если нет инструкции return
callback функции эти функции которые вызываються в теле другой функции

         типы областей видимости 
глобальная 
локальная 
блочная - переменные обьявленные с помощью let или const внутри блока имеют область видимости огрониченную этим блоком

также если обьявить переменную без ключевого слово let or const то js сделает это за вас автоматом но это крайне не рекомендуетиься однако если поставить выражение 'use strict' - то это не сработает в=и выдаст ошибку - этот мод можно использовать как в глобальной так и в локальной области видимости 

                 Правила работы с переменными
1 - все переменные обьявлять перед их использованием
2 - стараться использовать const везде где это возможно (let использвоать только в тех случаях если мы плонируеме перепресваивать значения)
3 - внутри функции не изменять переменные с внешних областей видимости


                    Операторы - встроеные функции
1 - арифмитические 
2 - сравнения 
3 - логические
4 - присваивание
5 - запятые
                Унарные операторы
6 - унарные операторы a++ - увеливает значение переменной на 1
+а тоже унарный оперетаор и с помощью него можно конвертировать строку в число
7 - delete obj.a -удоление
8 - typeOf- можно проверить тип того или иного значения
9 - new Object() - с помощью него можно создать новый экземпляр обьекта
                  Бинанрные операторы
                  у бинарных оператора всегда 2 операнда или аргумента
инфиксная запись - это когда оператор находиться между операндами
a = true
a + b
a += 5
a || b
a > b
так же оперетаоры && ,|| - являеться операторами замыкания

префиксная запись - это когда оператор находиться перед операндом
++a
delete obj.a
typeOf a - только префиксная запись

постфиксная запись - это когда оператор идет после операндами
a++
myFunction()
                    Текстовые Операторы

2 - instanceOf - можно проверить принадлжность обьекта к тому или иному класу
3 - new
4 - delete - 

               ложные значения 
false
0
''
undefiend
null

оператор ! часто всего используються в условных инструкциях
!10 - false         !!10 - true
!0 - true           !!0 - false
!'abc' - false      !!'abc' - true
!'' - true          !!true - true
!undefiend - true   !!undefiend - false

             функции
1 - функциональное вырожение в вызове другой функции (callback)
setTimeout(function () {
  console.log("starttttt");
}, 1000); - лучше задавать имя функции через переменную

но лучше сделать так 
setTimeout(() => { 
  console.log('wdawda')
},1000)

сокрощения в стрелочных функциях

a = {
  // тело функции 
}

(a,b) => a+b - фигурные скобки можно опустить если тело состоит из одного вырожения



                  обработка ошибок (try/catch)
try {
  выполнение блока кода 
} catch (error) {
  этот блок выполниться в случае возникновения ошибок в блоке try
}
пример:  
const fnWidtError = () => {
  throw new Error("some error");
};
try {
  fnWidtError();
} catch (error) {
  console.error(error);
  console.log(error.message);
}

console.log("continue..."); - в случае ошибки код продолжиться 
для этого и нуже трай кеч блок

                   инструкции
выражение всегда возвращает значение, выражение может быть инструкцией пример:
выражения - инструкция
'abc';
a = a + 3
c = a + b
d = 'Good ' + 'Evening'
myfn(c,d)
console.log('hey')

инструкция  выполняет действие и инструкция не может стать вырожением exzample: if or for:
if (a > b) {
  console.log('is larger')
}
for (i = 0 i < 5 i++ ) {
  console.log(i)
}

                massive
методы массивов - являеться функциями высшего порядка 
push - добовляет элемент в конец массива:
const arr = [1,2,3]
arr.push(4)
console.log(arr) // [1,2,3,4]
pop - удаление элемента в конца массива:
arr.pop()
console.log(arr) //[1,2,3]
unshift - добовляет элемент в начало массива:
arr.unshift(4)
console.log(arr) //[4,1,2,3,]
shift - удоляет первый элемент массива
arr.shift()
console.log(arr) //[1,2,3]

forEach - очень популярный метод он перебирает все элементы массива и выполняет с ними опредиленные действия с этими элементами но не меняет оригинальный массив возврощает undefiend тоесть не чего единственная его задача это перебор массива и выполнение действий с элементами

map - принимает в качестве аргумента колбэк функцию перебирает элементы изминяет их  и возврощает новый массив не изменяя исходник

                Деструктуризация обьектов
  сокрощает запись и пресваивает переменной

const useProfile1 = {
  namee: "kamilll",
  age: 13,
  isPopular: true,
};

const { namee, age } = useProfile1;
const { isPopular } = useProfile1;
console.log(namee); 
console.log(useProfile1.age);

const useProfile2 = ['apple','cartofel']
const [apple , cartofel] = useProfile2
console.log(apple)
console.log(cartofel);

                 инструкции
               инструкция if else
if (условие) {
  блок кода , выполняемый однократно если условие правдиво
} else {
  блок кода выполняемый однократно если условие ложно
}

                    инструкция switch
switch (выражение) {
case A:
 // действие если выражение === А
break
case B:
// действие если выражение равно В
break
default:
// действие по умолчанию
}

              Тернарный оператор и у него 3 операнда
          конытрукция с тернарным оператором - выражение
             а выражение всегда возвращает значение
условие ? выражение 1 : выражение 2

                      Циклы
for (Начальная инструкция; Условие; Итерационное действие) {
  // Блок кода выполняемый на каждой итерации
}

пример
for (let i = 0; i < 5; i++) {
  console.log(i)
}

const arr4 = ["first", "second", "third"];
for (let i = 0; i < arr4.length; i++) {
  console.log(arr4[i]);
}

циклы можно использовать для массивов но не рекомендуеться - лучше использовать функции высшего порядка массивов такие как - forEach, map, reduce and so on

arr4.forEach((el, index) => {
  console.log(el, index);
});

                sicle while
while(условие) {
  блок кода выполняемый на каждой итерации
}
надо быть осторожным что бы не войти в бесконечный цикл 

let o = 0;
while (o <= 5) {
  console.log(o);
  o++; - если не написать итерацию будет бесконечный цикл
}
      
                         do while
 do {
  блок кода выполняемый на каждой итерации - такой блок инструкции выполниться хотябы 1 раз
 } while (условие)

 do {
  console.log(o);
  o++;
} while (o < 5); - тоже самое что и while но с конструкцией do - и эту конструкцию нужно использовать только тогда какогда нужно что бы код выполнился хотябы раз

let o = 11;
do {
  console.log(o);
  o++;
} while (o < 5);
например тут хоть условие ложно но цикл всеравно выполниться раз

                   for in
key - переменная
Object - обьект
for (key in Object) {
 действие с каждым свойством обьекта
 значение своиства - Object[key]
}

как пример:
const myObj = {
  x: 10,
  y: true,
  z: "abc",
};

for (key in myObj) {
  console.log(key, myObj[key]);
}
 
в данном случае 1 key выдает ключи в переменной (x,y,z) а 2 выдает значение в переменной myObj
также можно использовать конструкцию forEach как пример

Object.keys(myObj).forEach((key) => {
  console.log(key, myObj[key]);
});

также мы можем полчить только значения используя код 
Object.values(myObj).forEach((values) => {
  console.log(values);
});

                     for of
 for (Element of Iteribal) {
   действия с опредиленным элементом
 }

 for of - нельзя использвоать для обьектов выдаст ошибку как пример 
 let myObjj = {
  x: 10,
  y: "aaa",
  z: true,
};

for (const prop of myObjj) {
  console.log(prop);
}

                 class
class Comment {
  constructor(text) {
    this.text = text;
    this.votes = 0;
  }
  upvote() {
    this.votes += 1;
  }
}
const firstComment = new Comment("First comment");
firstComment.upvote();
console.log(firstComment.votes);
firstComment.upvote();
console.log(firstComment.votes);
// firstComment instanceof Comment;
// firstComment instanceof Object;
console.log(firstComment);

  static mergeComments(first,second) {
    return `${first} ${second}`
  }
}
Comment.mergeComments('first comment.', 'second comment') - метод доступен как свойство класса и не наследуеться экземплярами класса

               Promise
промисы позволяют обробатывать отложенные во времени события
промис - это обещание результат позже
у промиса есть 3 состояния 
1 - ожидание (pending)
2 - выполненно(fulfilled)
3 - отклонено (reject)

const = new Promise((resolve,reject) => {
  code
})

получение результата промиса 
myPromise 
.then(value => {
  действия в случае успешного исполнения промиса
  значение value - это значение переданное в вызове функции resolve внутри промиса
})
catch(error => {
  действие в случая отклонения промиса
  значение error - это значение переданное в вызове функции  reject  внутри промиса
})

пример : 
fetch("https://jsonplaceholder.typicode.com/posts")
  .then((res) => res.json())
  .then((json) => console.log(json))
  .catch(error => console.log(error))

                  async/await
async/await - это специальный синтаксис для упрощения работы с промисами

  const asyncFn = async () => {
    return 'kamil'
  }

  asyncFn ()
  .then(value => console.log(value))

  2 - 
    const asyncFn = async () => {
    throw new Error('there wos error')
  }
  asyncFn ()
  .then(value => console.log(value))
  .catch(error => console.log(error.message))

  отслеживание работы await - и пока не выполниться timerPromise фугкция дальше не пойдет 

    const timerPromise = () => 
  new Promise((res, rej) => 
    setTimeout(() => res(),2000))

  const asyncFnn = async () => {
    console.log('timer start');
    const startTime = performance.now()
     await timerPromise()
     const endTime = performance.now()
    console.log('timer end',endTime - startTime );
  }
  asyncFnn()

  лучше оборачивать код в try/catch для ловли ошибок и после этого код продолжиться 

    const getData = async (url) => {
    const res = await fetch(url)
    const json = await res.json()
    return json
  }

  getData("https://jsonplaceholder.typicode.com/posts")
  
  try {
    const data = await getData(url)
    console.log(data)
  } catch (error) {
    console.log(error.message);
  }

              главное в async/await
1 - async/await -это синтаксическая надстройка над промисами
2 - await - синтаксис возможен только внутри async функции
3 - async - функция всегда возврощает Promise
4 - async - функция ожидает результата инструкции await и не выполняет последующие инструкции 